name: unit tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v3

    - name: lint
      run: CHECK_FORMAT=1 ./tools/run_clang_format.sh
      continue-on-error: true

    - name: run unit tests
      run: bazel test //test:all --test_tag_filters=-vcan
    
  build-linux-clang:
    runs-on: ubuntu-22.04

    steps:
    - name: checkout
      uses: actions/checkout@v3

    - name: run ultra_strict
      run: |
        sudo apt-get update 
        sudo apt-get install -y libtinfo5
        bazel build --repo_env=CC=clang --repo_env=CXX=clang++ //test:ultra_strict
  
  fuzz-replay-linux-clang:
    runs-on: ubuntu-22.04

    steps:
    - name: checkout
      uses: actions/checkout@v3

    - name: Cache Bazel
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/bazel
        key: ${{ runner.os }}-bazel-${{ hashFiles('**/MODULE.bazel', '**/*.bzl', '**/BUILD*') }}
        restore-keys: |
          ${{ runner.os }}-bazel-

    - name: run coverage
      run: |
        sudo apt-get update
        sudo apt-get install -y libtinfo5
        ./scripts/2_replay_corpus.sh
    
    - name: upload coverage to Codecov
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      run: |
        # Verify coverage file exists
        if [ ! -f coverage.lcov ]; then
          echo "Error: coverage.lcov file not found"
          exit 1
        fi
        echo "Coverage file size: $(wc -l < coverage.lcov) lines"
        # Download and run codecov
        curl -Os https://cli.codecov.io/latest/linux/codecov
        chmod +x codecov
        ./codecov upload-process --fail-on-error -t $CODECOV_TOKEN -F fuzz --file coverage.lcov --name "GitHub Actions Fuzz Coverage" --verbose --dry-run
        echo "=== Dry run completed, now doing actual upload ==="
        ./codecov upload-process --fail-on-error -t $CODECOV_TOKEN -F fuzz --file coverage.lcov --name "GitHub Actions Fuzz Coverage" --verbose
    
  unittest-windows:
    runs-on: windows-latest

    steps:
    - name: checkout
      uses: actions/checkout@v3

    - name: run unit tests
      run: bazel test //test:all --verbose_failures --test_output=all 


  build-arduino:
    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v3

    - name: Install Arduino CLI
      uses: arduino/setup-arduino-cli@v2

    - name: build
      run: |
        arduino-cli core install arduino:samd
        arduino-cli lib install CAN
        arduino-cli -b arduino:samd:mkrwifi1010 compile examples/arduino_server/main 


  build-esp32:
    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v3

    - name: esp-idf build
      uses: espressif/esp-idf-ci-action@v1
      with:
        esp_idf_version: v5.2
        target: esp32
        path: 'examples/esp32_server'