name: unit tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  pull-requests: write

jobs:

  linux:
    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v4

    - name: Setup Bazel Cache
      uses: ./.github/actions/setup-bazel-cache

    - name: run unit tests
      run: bazel test //test:all --test_tag_filters=-vcan
    
  linux-fuzz-coverage:
    runs-on: ubuntu-22.04

    steps:
    - name: checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha || github.sha }}

    - name: Debug commit info
      run: |
        echo "=== Commit Debug Info ==="
        echo "Current HEAD: $(git rev-parse HEAD)"
        echo "PR head SHA: ${{ github.event.pull_request.head.sha }}"
        echo "GitHub SHA: ${{ github.sha }}"

    - name: Setup Bazel Cache
      uses: ./.github/actions/setup-bazel-cache

    - name: run coverage
      run: |
        ./scripts/2_replay_corpus.sh
    
    - name: upload coverage to Codecov
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      run: |
        # Verify coverage file exists
        if [ ! -f coverage.lcov ]; then
          echo "Error: coverage.lcov file not found"
          exit 1
        fi
        echo "Coverage file size: $(wc -l < coverage.lcov) lines"
        # Download and run codecov
        curl -Os https://cli.codecov.io/latest/linux/codecov
        chmod +x codecov
        ./codecov upload --fail-on-error -t $CODECOV_TOKEN -F fuzz -f coverage.lcov -n "GitHub Actions Fuzz Coverage" 
    
  windows:
    runs-on: windows-latest

    steps:
    - name: checkout
      uses: actions/checkout@v4

    - name: Setup Bazel Cache
      uses: ./.github/actions/setup-bazel-cache

    - name: run unit tests
      run: bazel test //test:all --verbose_failures --test_output=all 


  arduino:
    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v4

    - name: Install Arduino CLI
      uses: arduino/setup-arduino-cli@v2

    - name: build
      run: |
        arduino-cli core install arduino:samd
        arduino-cli lib install CAN
        arduino-cli -b arduino:samd:mkrwifi1010 compile examples/arduino_server/main 


  esp32:
    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v4

    - name: esp-idf build
      uses: espressif/esp-idf-ci-action@v1
      with:
        esp_idf_version: v5.2
        target: esp32
        path: 'examples/esp32_server'
